#!/usr/bin/python

import rospy
from std_msgs.msg import String
from wifi_ddwrt.msg import *
from StringIO import StringIO
from visualization_msgs.msg import *

import tf
import roslib


class Fp_chart:
	def __init__(self, listener):
	  self.listener = listener
	  self.positions = []
	  rospy.Subscriber('ddwrt/r_survey', SiteSurvey, self.fingerprinting_cb)

	def fingerprinting_cb(self, survey):
          self.listener.waitForTransform('/map', '/base_link', survey.header.stamp, rospy.Duration(10))	  
          try:
            (trans, rot) = self.listener.lookupTransform('/map', '/base_link', survey.header.stamp)

	    #print ' '
            #print (trans, rot)
            #print survey
	    #print ' '
	    self.positions.append(((survey.networks[0].macaddr),(survey.networks[0].rssi),(survey.networks[1].macaddr),(survey.networks[1].rssi),(survey.networks[2].macaddr),(survey.networks[2].rssi),(survey.networks[3].macaddr),					(survey.networks[3].rssi),(survey.networks[4].macaddr),(survey.networks[4].rssi),trans))

            for position in self.positions:
            print position
            print ' '

	    
          except (tf.LookupException, tf.ConnectivityException):
            print "Got an exception that should never happen"
            return


def fingerprinting():
	rospy.init_node('listener', anonymous=True)

	listener = tf.TransformListener()
        fp = Fp_chart(listener)	
	rospy.spin()


if __name__ == '__main__':
	fingerprinting()
